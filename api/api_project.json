{
  "name": "YACUNA API",
  "version": "1.0.0",
  "description": "Trading API Specification",
  "title": "YACUNA Trading API Specification",
  "url": "https://yacuna.com",
  "header": {
    "title": "General",
    "content": "<h1 id=\"general\">General</h1>\n<h2 id=\"about-yacuna\">About Yacuna</h2>\n<p>Yacuna.com is an international trading platform for digital currencies. \nRegistered users can easily conduct their financial transactions in Bitcoins (XBT), Litecoins (LTC) and Dogecoins (DOGE).\nAll crypto currencies can be seamlessly exchanged to conventional currencies (e.g. EUR and GBP). \nAll transactions with digital currencies on the Yacuna trading platform are subject to the same market mechanisms also known from trading and stock exchanges.\nYacuna Trading API allows you to become the high-frequency power trader on the Yacuna platform and to take advantage of arbitrage. \nYou can easily create, confirm and cancel market orders, monitor your deals and wallet balances in different currencies. \nYou can of course access the whole Yacuna order book and get information about the current market depth and spread.\n</p>\nPlease note: Yacuna uses XBT currency code for Bitcoin instead of BTC.\nXBT currency code complies with <a href=\"http://en.wikipedia.org/wiki/ISO_4217\" title=\"ISO 4217\">ISO 4217</a> standard for currencies. Since Bitcoin is not associated with any specific country, the standard dictates that it should start with an X as does Gold (XAU) and Silver (XAG).</p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<p>To be able to use the Yacuna Trading API you need a valid Yacuna account which you can easily create at <a href=\"https://yacuna.com\" title=\"Yacuna Exchange for DOGE XBT LTC\">Yacuna exchange</a>.\nWe would recommend you to add all user data which is needed to complete your full KYC (Know Your Customer) verification, \nthis will bring you higher limits on deposits, withdrawals and trading transactions.\nYou can do this under Settings / Personal Data. See more information regarding verification levels and limits under <a href=\"https://yacuna.com/blog/faq/\" title=\"Yacuna FAQ\">Yacuna FAQ</a>\nTo get started using Yacuna Trading API go to your settings area and find &quot;API Token Id&quot; and &quot;API Token Secret&quot; under the API-tab.\nYou will need those data to generate the &quot;API-Token&quot; to be passed with each API call within HTTP headers for your secure authentication.\nBelow you find description for every API call and examples how to implement them.\nDo not hesitate to contact us in case of any questions or to share your experience or may be even your own implementation examples in other programming languages with us:<br/>\n<a href=\"https://yacuna.com/blog/contact/\" title=\"Yacuna Contact Form\">Contact Yacuna</a> </br>\n<a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#105;&#110;&#102;&#111;&#64;&#x79;&#x61;&#99;&#117;&#110;&#97;&#46;&#x63;&#x6f;&#109;\">&#105;&#110;&#102;&#111;&#64;&#x79;&#x61;&#99;&#117;&#110;&#97;&#46;&#x63;&#x6f;&#109;</a> </br></p>\n<h2 id=\"sandbox\">Sandbox</h2>\n<p>Yacuna provides a fully functional <a href=\"https://sandbox.yacuna.com\" title=\"Safe testing environment at Yacuna Sandbox\">Sandbox</a> accessible by everyone for free. Sandbox provides the same functionality as the live system. But instead of normal cryptocoins and real fiat money it uses coins generated in the testnet and virtual fiat money provided by Yacuna. You can use the Yacuna sandbox to safely test the functionality of our trading platform or to write your apps utilizing our API before using them in a live environment. After you registered <a href=\"https://sandbox.yacuna.com/#/signup\" title=\"Registration for the Yacuna Sandbox\">here</a> Yacuna will provide you with a supply of virtual money. <!--- You can also use the [Yacuna Faucet](https://faucet.yacuna.com \"Get your testcoins here\") to request testcoins that can be used at the Sandbox.--> Naturally withdrawal of fiat currency is deactivated and we kindly ask you to send the testcoins back to Yacuna when you finished testing the Sandbox. </p>\n<h2 id=\"authentication\">Authentication</h2>\n<p>To be able to use the Yacuna Trading API you need a valid Yacuna account.<br>\nIn your settings area you should get &quot;API Token Id&quot; and &quot;API Token Secret&quot;.<br>\nUsing those data you can generate the &quot;Api-Token&quot; to be calculated and passed with each API call within HTTP headers.<br>\nAs salt for Api-token calculation unix timestamp in milliseconds should be used.<br></p>\n<p><p><strong>Inputs for Api-token calculation</strong></p></p>\n<table>\n    <thead>\n        <tr>\n            <th style=\"width: 30%\">Field</th>\n            <th style=\"width: 70%\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"code\">Salt</td>\n            <td>Timestamp in milliseconds</td>\n        </tr>\n        <tr>\n            <td class=\"code\">API secret</td>\n            <td>From your Yacuna account</td>\n        </tr>\n        <tr>\n            <td class=\"code\">Http method of request</td>\n            <td>GET, POST, etc.</td>\n        </tr>\n        <tr>\n            <td class=\"code\">URI path of request</td>\n            <td>eg. /api/1/wallet/get&amp;currency=EUR</td>\n        </tr>\n        <tr>\n            <td class=\"code\">Separator character</td>\n            <td>@</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>Plain input for Api-Token calculation: </p>\n<pre class=\"prettyprint language-html prettyprinted\" data-type=\"example\"><code><span class=\"pln\">1404203385000@0ab0ac9aa5fb881b30d56cb40368c8a2@GET@/api/1/wallet/get</span></code></pre>\n\n<p>Api token creation algorithm: </p>\n<pre class=\"prettyprint language-html prettyprinted\" data-type=\"algorithm\"><code><span class=\"pln\">salt+T+hex(sha512(plain input))</span></code></pre>\n\n<p>Api token result</p>\n<pre class=\"prettyprint language-html prettyprinted\" data-type=\"example\"><code><span class=\"pln\">1404203385000T0e584fdc9905755173dac10ac02d0bdd24ce2eef5df41cee5e4daca750d461c9c5bc301b74deb3f566389b8008496a86ca3188034cab853a453c354bb2a1e647</span></code></pre>\n\n<p><p>\nAs additional security option one time password can be added.</p>\n<p><p>\nMethod parameters are sent via HTTP POST.</p>\n<p><p>\nAPI answers are in JSON format.</p>\n<p><strong>Example of HTTP header data needed for the call authentication:</strong></p>\n<pre class=\"prettyprint\" data-type=\"json\">\n<code>\n{\n    \"Api-Token-Id\": \"AAEAAAgfi0NjCp9rrgTVM2-BBrP6AgkykwBEwFj74fcHFkNpmcsgjLph\",\n    \"Api-Token\": \"1401710118967Tcdbbf266b260a494ed99d0037de0c5c8353934335bd9656c8c4d1b449602f6c62231446b727f3a1e9918919af6bfdba574f5e245fe132e1fff04b4c111b72823\",\n    \"Api-Token-OTP\": \"\"\n}\n</code>\n</pre>\n\n<p><strong>Example code in JavaScript how to calculate Api-token</strong></p>\n<pre class=\"prettyprint language-javascript\">\n<code>\nfunction createTokenHeaders(requestMethod, requestUrl, requestQueryString, requestBody) {\n    if (isEmpty(tokenId)) {\n        return {};\n    }\n    var tokenSalt = '' + new Date().getTime();\n    var hashInput = tokenSalt + '@' + tokenSecret + '@' + requestMethod + '@' + requestUrl;\n    if (!isEmpty(requestQueryString)) {\n        hashInput = hashInput + '?' + requestQueryString;\n    }\n    if (!isEmpty(requestBody)) {\n        hashInput = hashInput + '@' + createRequestBodyForSignature(requestBody);\n    }\n    var hasher = new jsSHA(hashInput, 'TEXT');\n    return {\n        'Api-Token-Id': tokenId,\n        'Api-Token': tokenSalt + 'T' + hasher.getHash(\"SHA-512\", \"HEX\"),\n        'Api-Token-OTP': tokenOTP\n    };\n}\n\nfunction createRequestBodyForSignature(elements) {\n    if (!elements) {\n        return '';\n    }\n    var keys = [];\n    for (key in elements) {\n        keys.push(key);\n    }\n    keys.sort();\n    var result = '';\n    for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n        value = elements[key];\n        if (value instanceof File) {\n            value = value.name;\n        }\n        if (value === null) {\n            value = '';\n        }\n        if (result === '') {\n            result = key + \"=\" + value;\n        } else {\n            result = result + \"&\" + key + \"=\" + value;\n        }\n    }\n    return result;\n}\n</code>\n</pre>\n\n<p><strong>Example code in Perl how to calculate Api-token</strong></p>\n<pre class=\"prettyprint language-perl\">\n<code>\n\nmy $requestParams = [\"param1=value1\", \"param1=value1\", \"param1=value1\"];\nmy $qry = defined $requestParams?(join \"&\", sort @{$requestParams}):undef;\nmy $body = '';\nif('GET' eq $httpMethod && $qry ne ''){\n    $restPath .= \"?$qry\";\n}\nelsif('POST' eq $httpMethod){\n    $body = $qry;\n}\n\nmy $apiToken = &prepareAuth($basePath.$restPath, $body, $httpMethod, $apiSecret);\n\nsub prepareAuth(){\n    my ($path, $body, $httpMethod, $apiSecret) = @_;\n    my $tokenSalt = ''.time*1000;\n    my $hashInput = $tokenSalt.'@'.$apiSecret.'@'.$httpMethod.'@'.$path;\n    $hashInput .= '@'.$body if '' ne $body;\n    my $apiToken = $tokenSalt.'T'.(sha512_hex($hashInput));\n\n    return $apiToken;\n}\n</code>\n</pre>\n\n"
  },
  "footer": {
    "title": "Examples",
    "content": "<h1 id=\"examples\">Examples</h1>\n<h2 id=\"perl\">Perl</h2>\n<p><strong>Example code in Perl how to implement Yacuna API client</strong></p>\n<pre class=\"prettyprint language-perl\">\n<code>\n#!/usr/bin/perl\n\nuse strict;\nno strict 'subs';\nuse warnings;\n\nuse WWW::Mechanize;\nuse Data::Dump qw(dump);\nuse JSON;\nuse Error qw(:try);\nuse MIME::Base64;\nuse Digest::SHA qw(sha512 sha512_hex);\n\nmy $browser = WWW::Mechanize->new(\n    # skip ssl validation in case of test system\n    ssl_opts => {\n        SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_NONE,\n        verify_hostname => 0 # this key is likely going to be removed in future LWP >6.04\n    }\n);\n\nmy $json = new JSON;\n\nmy $apiTokenId = 'AAEabcgfi0NjCp9rr123M2-xxxP6AgkykwBEwFj74fcHFkNXlPsgjLph';\nmy $apiSecret = '0a489cbb9aa5fb8abd90d56cb4036123';\nmy $apiHost = 'https://test.yacuna.com';\nmy $basePath = '/api/1/';\n\nmain->run();\n\nsub run{\n    try{\n        &getMyWallet();\n    }\n    catch Error::Simple with{\n        my $E = shift;\n        dump($E);\n    };\n    exit(0);\n}\n\nsub getMyWallet(){\n    my $path = $basePath.'wallet/get';\n    my $apiToken = &prepareAuth($path);\n    my $wallet = &fetchData('GET', $apiHost.$path, $apiToken);\n\n    foreach my $account (@{$wallet->{'wallet'}->{'accounts'}}){\n        dump($account);\n    }\n}\n\nsub fetchData(){\n    my ($method, $uri, $apiToken) = @_;\n    $browser->add_header( 'Api-Token-Id' => $apiTokenId, 'Api-Token' => $apiToken, 'Api-Token-OTP'=>'');\n\n    try{\n        if($method eq 'GET'){\n            $browser->get($uri);\n        }\n        my $resp = $json->decode($browser->content());\n        return $resp;\n    }\n    catch Error with{\n        my $E = shift;\n        dump($browser->response->decoded_content);\n    }\n}\n\nsub prepareAuth(){\n    my ($path) = @_;\n    my $tokenSalt = ''.time*1000;\n    my $hashInput = $tokenSalt.'@'.$apiSecret.'@'.'GET'.'@'.$path;\n    my $apiToken = $tokenSalt.'T'.(sha512_hex($hashInput));\n    return $apiToken;\n}\n</code>\n</pre>\n\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-55370639-1', 'auto');\n  ga('send', 'pageview');\n</script>\n"
  },
  "generator": {
    "version": "0.7.0",
    "time": "2014-11-12T11:35:13.602Z"
  }
}